{"version":3,"sources":["webpack:///./js/promiss.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","makeTransaction","transaction","min","max","Math","floor","random","reject","canProcess","id","wait","logSuccess","logError","warn","amount","catch"],"mappings":"yLACMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAiBnEJ,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GAGnC,IAIMa,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCrB,GAL2BoB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIlB,SAAQ,SAACC,EAASsB,GAC3B,IAAMC,EAAaJ,KAAKE,SAAW,GACnCpB,YAAW,WACLsB,EACFvB,EAAQ,CAAEwB,GAAIR,EAAYQ,GAAIC,KAAM5B,IAEpCyB,EAAON,EAAYQ,MAEpB3B,OAID6B,EAAa,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACxBrB,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CC,EAA9C,OAGIE,EAAW,SAAAH,GACfpB,QAAQwB,KAAR,gCAA6CJ,EAA7C,8BAaFT,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAE/DZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,K","file":"main.477aadc326f9027476b6.js","sourcesContent":["// ЗАВДАННЯ №1\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n// // Виклич функції для перевірки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n// ЗАВДАННЯ №2\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst loggerTask2 = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Зараз працює так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Повинно працювати так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n// ЗАВДАННЯ №3\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const canProcess = Math.random() > 0.3;\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, wait: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, wait }) => {\r\n  console.log(`Transaction ${id} processed in ${wait}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Зараз працює так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Повинно працювати так\r\n//  */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}